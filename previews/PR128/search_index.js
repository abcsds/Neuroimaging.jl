var documenterSearchIndex = {"docs":
[{"location":"assr/functions/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"assr/functions/","page":"API","title":"API","text":"In addition to the function available for processing EEG data, a number of functions are provided specifically for the processing of SSR data","category":"page"},{"location":"assr/functions/#Import","page":"API","title":"Import","text":"","category":"section"},{"location":"assr/functions/","page":"API","title":"API","text":"read_SSR","category":"page"},{"location":"assr/functions/#Neuroimaging.read_SSR","page":"API","title":"Neuroimaging.read_SSR","text":"Read SSR from file or IO stream\n\nRead a file or IO stream and store the data in an SSR type.\n\nMatching .mat files are read and modulation frequency information extracted. Failing that, user passed arguments are used or the modulation frequency is extracted from the file name.\n\nArguments\n\nfname: Name of the file to be read\nmin_epoch_length: Minimum epoch length in samples. Shorter epochs will be removed (0)\nmax_epoch_length: Maximum epoch length in samples. Longer epochs will be removed (0 = all)\nvalid_triggers: Triggers that are considered valid, others are removed ([1,2])\nstimulation_amplitude: Amplitude of stimulation (NaN)\nmodulationrate: Modulation frequency of SSR stimulation (NaN)\ncarrier_frequency: Carrier frequency (NaN)\nparticipant_name: Name of participant (\"\")\nremove_first: Number of epochs to be removed from start of recording (0)\nmax_epochs: Maximum number of epochs to retain (0 = all)\nenv (nothing)\nbkt (\"\")\n\nSupported file formats\n\nBIOSEMI (.bdf)\n\n\n\n\n\n","category":"function"},{"location":"assr/functions/#Preprocessing","page":"API","title":"Preprocessing","text":"","category":"section"},{"location":"assr/functions/#Filtering","page":"API","title":"Filtering","text":"","category":"section"},{"location":"assr/functions/","page":"API","title":"API","text":"highpass_filter(::SSR)\nlowpass_filter(::SSR)","category":"page"},{"location":"assr/functions/#Neuroimaging.highpass_filter-Tuple{SSR}","page":"API","title":"Neuroimaging.highpass_filter","text":"highpass_filter(a::SSR; cutOff::Real=2, fs::Real=samplingrate(a), order::Int=3, tolerance::Real=0.01, kwargs...)\n\nApplly a high pass filter.\n\nA zero phase high pass filter is applied to the data using filtfilt. A check is performed to ensure the filter does not affect the modulation rate. The filter coefficents are stored in the processing field.\n\nExample\n\na = highpass_filter(a)\n# or\na = highpass_filter(a, cutOff = 1)\n\n\n\n\n\n","category":"method"},{"location":"assr/functions/#Statistics","page":"API","title":"Statistics","text":"","category":"section"},{"location":"assr/functions/","page":"API","title":"API","text":"ftest(::SSR)\nsave_results(::SSR)","category":"page"},{"location":"assr/functions/#Neuroimaging.ftest-Tuple{SSR}","page":"API","title":"Neuroimaging.ftest","text":"Run f-test statistics on steady state response measurement.\n\nBy default saves information to the key statistics, but this can be modified by the user.\n\nTODO: Find a good reference.\n\n\n\n\n\n","category":"method"},{"location":"assr/functions/#Plotting","page":"API","title":"Plotting","text":"","category":"section"},{"location":"assr/functions/","page":"API","title":"API","text":"plot_timeseries(::SSR)","category":"page"},{"location":"assr/functions/#Neuroimaging.plot_timeseries-Tuple{SSR}","page":"API","title":"Neuroimaging.plot_timeseries","text":"plot_timeseries(s::SSR; channels, fs, kwargs)\n\nPlot an SSR recording.\n\nPlot detailed single channel or general multichanel figure depending on how many channels are requested.\n\nInput\n\ns: SSR type\nchannels: The channels you want to plot, all if not specified\nfs: Sample rate\nOther optional arguements are passed to the Plots.jl functions\n\nOutput\n\nReturns a figure\n\nExample\n\nplot1 = plot_timeseries(s, channels=[\"P6\", \"Cz\"], plot_points=8192*4)\ndraw(PDF(\"timeseries.pdf\", 10inch, 6inch), plot1)\n\n\n\n\n\n","category":"method"},{"location":"api/#Library","page":"API","title":"Library","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Neuroimaging","category":"page"},{"location":"api/#Module","page":"API","title":"Module","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Neuroimaging","category":"page"},{"location":"api/#Neuroimaging.Neuroimaging","page":"API","title":"Neuroimaging.Neuroimaging","text":"A Julia package for process neuroimaing data.\n\n\n\n\n\n","category":"module"},{"location":"api/#To-be-sorted","page":"API","title":"To be sorted","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"remove_template\nimport_biosemi \nadd_channel\njoin_triggers\nkeep_channel!\nvalidate_triggers\nclean_triggers\nremove_channel!\nsamplingrate\nextract_epochs\nfind_dipoles\nfind_location","category":"page"},{"location":"api/#Neuroimaging.remove_template","page":"API","title":"Neuroimaging.remove_template","text":"Remove a template signal from each column of an array\n\nArguments\n\nsignals: Original signals to be modified  (samples x channels)\ntemplate: Template to remove from each signal\n\nReturns\n\nSignals with template removed\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.import_biosemi","page":"API","title":"Neuroimaging.import_biosemi","text":"Import Biosemi files\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.add_channel","page":"API","title":"Neuroimaging.add_channel","text":"Add a channel to the SSR type with specified channel names.\n\nExample\n\nAdd a channel called Merged\n\ns = read_SSR(filename)\nnew_channel = mean(s.data, 2)\ns = add_channel(s, new_channel, \"Merged\")\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.join_triggers","page":"API","title":"Neuroimaging.join_triggers","text":"Append the trigger information of one EEG type to another. Places the trigger information at the end of first file\n\nExample\n\njoin_triggers(a, b)\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.keep_channel!","page":"API","title":"Neuroimaging.keep_channel!","text":"Remove all channels except those requested from EEG.\n\nExample\n\nRemove all channels except Cz and those in the set called EEG_Vanvooren_2014_Right\n\na = read_SSR(filename)\nkeep_channel!(a, [EEG_Vanvooren_2014_Right, \"Cz\"])\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.validate_triggers","page":"API","title":"Neuroimaging.validate_triggers","text":"Validate trigger channel\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.clean_triggers","page":"API","title":"Neuroimaging.clean_triggers","text":"Clean trigger channel\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.remove_channel!","page":"API","title":"Neuroimaging.remove_channel!","text":"Remove specified channels from EEG.\n\nExample\n\nRemove channel Cz and those in the set called EEG_Vanvooren_2014_Right\n\na = read_SSR(filename)\nremove_channel!(a, [EEG_Vanvooren_2014_Right, \"Cz\"])\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.samplingrate","page":"API","title":"Neuroimaging.samplingrate","text":"Return the sampling rate of a steady state type. If no type is provided, the sampling rate is returned as a floating point.\n\nExample\n\nReturn the sampling rate of a recording\n\ns = read_SSR(filename)\nsamplingrate(s)\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.extract_epochs","page":"API","title":"Neuroimaging.extract_epochs","text":"Extract epoch data from array of channels.\n\nInput\n\nArray of raw data. Samples x Channels\nDictionary of trigger information\nVector of valid trigger numbers\nNumber of first triggers to remove\nNumber of end triggers to remove\n\nExample\n\nepochs = extract_epochs(data, triggers, [1,2], 0, 0)\n\n\n\n\n\nExtract epoch data from SSR\n\nArguments\n\na: A SSR object\nvalid_triggers: Trigger numbers that are considered valid ([1,2])\nremove_first: Remove the first n triggers (0)\nremove_last: Remove the last n triggers (0)\n\nExample\n\nepochs = extract_epochs(SSR, valid_triggers=[1,2])\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.find_dipoles","page":"API","title":"Neuroimaging.find_dipoles","text":"Find all dipole in an activity map.\n\nDetermines the local maxima in a 3 dimensional array\n\nInput\n\ns: Activity in 3d matrix\nwindow: Windowing to use in each dimension for min max filter\nx,y,z: Coordinates associated with s matrix\n\nOutput\n\ndips: An array of dipoles\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.find_location","page":"API","title":"Neuroimaging.find_location","text":"Find index of location of coordinate or dipole in leadfield\n\n\n\n\n\nFind indicies of location in VolumeImage\n\n\n\n\n\n","category":"function"},{"location":"api/#IO","page":"API","title":"IO","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"read_elp\nwrite_avr\nread_avr\nread_evt\nread_sfp\nread_dat\nread_bsa","category":"page"},{"location":"api/#Neuroimaging.read_elp","page":"API","title":"Neuroimaging.read_elp","text":"Read elp file containing sensor locations\n\nInput\n\nfname: Name or path for the sfp file\ncoordinate: Coordinate system for electrode location\nr: Radius for converting spherical coords\n\nOutput\n\nelecs: Array of electrode objects\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.write_avr","page":"API","title":"Neuroimaging.write_avr","text":"Write AVR file\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.read_avr","page":"API","title":"Neuroimaging.read_avr","text":"Read AVR (.avr) file\n\nInput\n\nfname: Name or path for the AVR file\n\nOutput\n\ndata: Array of data read from AVR file. Each column represents a channel, and each row represents a point.\nchanNames: Channel Names\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.read_evt","page":"API","title":"Neuroimaging.read_evt","text":"Read *.evt file and convert to form for EEG.jl\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.read_sfp","page":"API","title":"Neuroimaging.read_sfp","text":"Read sfp file containing sensor locations\n\nInput\n\nfname: Path for the sfp file\n\nOutput\n\nelec: Electrodes object\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.read_dat","page":"API","title":"Neuroimaging.read_dat","text":"Read dat files\n\nArguments\n\nfname: Name or path for the dat file\n\nReturns\n\nx: Range of x values\ny: Range of y values\nz: Range of z values\ncomplete_data: Array (x × y × z x t)\nsample_times\n\nReferences\n\nFile specs were taken from fieldtrip\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.read_bsa","page":"API","title":"Neuroimaging.read_bsa","text":"Read Besa's BSA (.bsa) file\n\nInput\n\nfname: Name or path for the BSA file\n\nOutput\n\nbsa: Dipole object\n\n\n\n\n\n","category":"function"},{"location":"api/#Channels","page":"API","title":"Channels","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"match_sensors\ntrim_channel\nchannelnames\nmerge_channels\nchannel_rejection","category":"page"},{"location":"api/#Neuroimaging.match_sensors","page":"API","title":"Neuroimaging.match_sensors","text":"Match a set of electrodes to those provided\n\nusage: lf, valid = matchsensors(electrodes, sensorlabels)\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.trim_channel","page":"API","title":"Neuroimaging.trim_channel","text":"Trim EEG recording by removing data after stop specifed samples.\n\nOptional Parameters\n\nstart Remove samples before this value\n\nExample\n\nRemove the first 8192 samples and everything after 8192*300 samples\n\ns = trim_channel(s, 8192*300, start=8192)\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.channelnames","page":"API","title":"Neuroimaging.channelnames","text":"Return the names of sensors in EEG measurement.\n\nExample\n\ns = read_SSR(filename)\nchannelnames(s)\n\n\n\n\n\nChange the names of sensors in EEG measurement.\n\nExample\n\ns = read_SSR(filename)\nchannelnames(s, 1, \"Fp1\")\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.merge_channels","page":"API","title":"Neuroimaging.merge_channels","text":"Merge EEG channels listed in merge_Chans and label the averaged channel as new_name\n\nIf multiple channels are listed then the average of those channels will be added.\n\nExample\n\ns = merge_channels(s, [\"P6\", \"P8\"], \"P68\")\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.channel_rejection","page":"API","title":"Neuroimaging.channel_rejection","text":"Reject channels with too great a variance.\n\nRejection can be based on a threshold or dynamicly chosen based on the variation of all channels.\n\nArguments\n\nsignals: Array of data in format samples x channels\nthreshold_abs: Absolute threshold to remove channels with variance above this value\nthreshold_std: Reject channels with a variance more than n times the std of all channels\n\nReturns\n\nAn array indicating the channels to be kept\n\n\n\n\n\n","category":"function"},{"location":"api/#Preprocessing","page":"API","title":"Preprocessing","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"rereference\nhighpass_filter\nlowpass_filter\nbandpass_filter\ncompensate_for_filter\nepoch_rejection\npeak2peak","category":"page"},{"location":"api/#Neuroimaging.rereference","page":"API","title":"Neuroimaging.rereference","text":"Re reference a signals to specific signal channel by index.\n\nIf multiple channels are specififed, their average is used as the reference.\n\nArguments\n\nsignals: Original signals to be modified\nrefChan: Index of channels to be used as reference\n\nReturns\n\nRereferenced signals\n\n\n\n\n\nRe-reference a signals to specific signal channel by name.\n\nIf multiple channels are specififed, their average is used as the reference. Or you can specify to use the average reference.\n\nArguments\n\nsignals: Original signals to be modified\nrefChan: List of channels to be used as reference or average\nchanNames: List of channel names associated with signals array\n\nReturns\n\nRereferenced signals\n\n\n\n\n\nrereference(a::SSR, refChan::Union{AbstractString, Array{AbstractString}}; kwargs...)\n\nReference data to specified channel(s).\n\nExample\n\na = rereference(a, \"Cz\")\n# or\na = rereference(a, [\"P9\", \"P10\"])\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.highpass_filter","page":"API","title":"Neuroimaging.highpass_filter","text":"High pass filter applied in forward and reverse direction\n\nSimply a wrapper for the DSP.jl functions\n\nArguments\n\nsignals: Signal data in the format samples x channels\ncutOff: Cut off frequency in Hz\nfs: Sampling rate\norder: Filter orde\n\nReturns\n\nfiltered signal\nfilter used on signal\n\n\n\n\n\nhighpass_filter(a::SSR; cutOff::Real=2, fs::Real=samplingrate(a), order::Int=3, tolerance::Real=0.01, kwargs...)\n\nApplly a high pass filter.\n\nA zero phase high pass filter is applied to the data using filtfilt. A check is performed to ensure the filter does not affect the modulation rate. The filter coefficents are stored in the processing field.\n\nExample\n\na = highpass_filter(a)\n# or\na = highpass_filter(a, cutOff = 1)\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.lowpass_filter","page":"API","title":"Neuroimaging.lowpass_filter","text":"Low pass filter applied in forward and reverse direction\n\nSimply a wrapper for the DSP.jl functions\n\nInput\n\nsignals: Signal data in the format samples x channels\ncutOff: Cut off frequency in Hz\nfs: Sampling rate\norder: Filter orde\n\nOutput\n\nfiltered signal\nfilter used on signal\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.bandpass_filter","page":"API","title":"Neuroimaging.bandpass_filter","text":"Band pass filter\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.compensate_for_filter","page":"API","title":"Neuroimaging.compensate_for_filter","text":"Recover the spectrum of signal by compensating for filtering done.\n\nArguments\n\nfilter: The filter used on the spectrum\nspectrum: Spectrum of signal\nfrequencies: Array of frequencies you want to apply the compensation to\nfs: Sampling rate\n\nReturns\n\nSpectrum of the signal after comensating for the filter\n\nTODO\n\nExtend this to arbitrary number of dimensions rather than the hard coded 3\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.epoch_rejection","page":"API","title":"Neuroimaging.epoch_rejection","text":"Reject epochs based on the maximum peak to peak voltage within an epoch across all channels\n\nArguments\n\nepochs: Array containing the epoch data in the format samples x epochs x channels\nretain_percentage: The percentage of epochs to retain\nrejection_method: Method to be used for epoch rejection (peak2peak)\n\nReturns\n\nAn array with a reduced amount of entries in the epochs dimension\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.peak2peak","page":"API","title":"Neuroimaging.peak2peak","text":"Find the peak to peak value for each epoch to be returned to epoch_rejection()\n\n\n\n\n\n","category":"function"},{"location":"api/#Statistics","page":"API","title":"Statistics","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ftest","category":"page"},{"location":"api/#Neuroimaging.ftest","page":"API","title":"Neuroimaging.ftest","text":"Calculates the F test as is commonly implemented in SSR research. TODO: Add references to MASTER and Luts et al\n\nParameters\n\nSweep measurements. Samples x Sweeps x Channels\nFrequency(ies) of interest (Hz)\nSampling rate (Hz)\nThe amount of data to use on each side of frequency of interest to estimate noise (Hz)\nFilter used on the sweep data. If provided then is compensated for\nThe number of bins to ignore on each side of the frequency of interest\n\nReturns\n\nSignal to noise ratio in dB\nSignal phase at frequency of interest\nSignal power at frequency of interest\nNoise power estimated of side frequencies\nF statistic\n\n\n\n\n\nRun f-test statistics on steady state response measurement.\n\nBy default saves information to the key statistics, but this can be modified by the user.\n\nTODO: Find a good reference.\n\n\n\n\n\n","category":"function"},{"location":"api/#Plotting","page":"API","title":"Plotting","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"plot_single_channel_timeseries\nplot_multi_channel_timeseries","category":"page"},{"location":"api/#Neuroimaging.plot_single_channel_timeseries","page":"API","title":"Neuroimaging.plot_single_channel_timeseries","text":"Plot a single channel time series\n\nInput\n\nsignal: Vector of data\nfs: Sample rate\nchannels: Name of channel to plot\nplot_points: Number of points to plot, they will be equally spread. Used to speed up plotting\nOther optional arguements are passed to gadfly plot function\n\nOutput\n\nReturns a figure\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.plot_multi_channel_timeseries","page":"API","title":"Neuroimaging.plot_multi_channel_timeseries","text":"Plot a multi channel time series\n\nInput\n\nsignals: Array of data\nfs: Sample rate\nchannels: Name of channels\nplot_points: Number of points to plot, they will be equally spread. Used to speed up plotting\nOther optional arguements are passed to gadfly plot function\n\nOutput\n\nReturns a figure\n\n\n\n\n\n","category":"function"},{"location":"assr/examples/#Example","page":"Example","title":"Example","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"This tutorial demonstrates how to analyse an EEG measurement that was acquired while the participant was listening to a modulated noise. This stimulus should evoke an Auditory Steady State Response (ASSR) that can be observed in the signal.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"The stimulus was modulated at 40.0391 Hz. As such, the frequency content of the signal will be examined. An increase in stimulus locked activity is expected at the modulation rate and harmonics, but not other frequencies.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"A standard ASSR analysis is performed. After an introduction to the data structure, a high pass filter is applied, the signal is referenced to Cz, epochs are extracted then combined in to sweeps, then finally an f-test is applied to the sweep data in the frequency domain. For further details on analysis see:","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"Picton, Terence W. Human auditory evoked potentials. Plural Publishing, 2010.\nLuke, Robert, Astrid De Vos, and Jan Wouters. \"Source analysis of auditory steady-state responses in acoustic and electric hearing.\" NeuroImage 147 (2017): 568-576.\nLuke, Robert, et al. \"Assessing temporal modulation sensitivity using electrically evoked auditory steady state responses.\" Hearing research 324 (2015): 37-45.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"Note: this example demonstrates the existing capabilities of the package. General improvements are planned to this package. But before changes are made, the existing features and functions will be documented. This will help to highlight was has already been implemented, and where improvements need to be made.","category":"page"},{"location":"assr/examples/#Read-data","page":"Example","title":"Read data","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"First we read the measurement data which is stored in biosemi data format.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"using DisplayAs # hide\nusing Neuroimaging, DataDeps, Unitful\ndata_path = joinpath(\n    datadep\"ExampleSSR\",\n    \"Neuroimaging.jl-example-data-master\",\n    \"neuroimaingSSR.bdf\",\n)\n\ns = read_SSR(data_path)","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"The function will extract the modulation from the function name if available. In this case the file name was not meaningful, and so we must inform the software of information that is essential to analysis, but not stored in the data. When analysing a steady state response a modulation rate is required. Which can be set according to:","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"s.modulationrate = 40.0391u\"Hz\"\ns","category":"page"},{"location":"assr/examples/#Get-info","page":"Example","title":"Get info","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"Now that the data has been imported, we can query it to ensure the requisite information is available. First we query the file channel names. Note that we call the function channelnames, and do not access properties of the type itself. This allows the use of the same functions across multiple  datatypes due to the excellent dispatch system in the Julia language.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"channelnames(s)","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"Similarly we can query the sample rate of the measurement:","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"samplingrate(s)","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"Or the trigger information that was imported with the data:","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"s.triggers\n# Note, this will change see \n# https://github.com/rob-luke/Neuroimaging.jl/issues/123\n# https://github.com/rob-luke/Neuroimaging.jl/issues/101","category":"page"},{"location":"assr/examples/#Preprocessing","page":"Example","title":"Preprocessing","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"s = highpass_filter(s)\ns = rereference(s, \"Cz\")\nremove_channel!(s, \"Cz\")\ns","category":"page"},{"location":"assr/examples/#Visualise-processed-continuous-data","page":"Example","title":"Visualise processed continuous data","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"using Plots # hide\nplot_timeseries(s, channels=\"TP7\")\ncurrent() |> DisplayAs.PNG # hide","category":"page"},{"location":"assr/examples/#Epoch-and-combine-data","page":"Example","title":"Epoch and combine data","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"To emphasise the stimulus locked nature of the response and combat clock drift the signal is then cut in to epochs based on the trigger information. To increase the available frequency resolution the epochs are then concatenated in to sweeps.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"s = extract_epochs(s)\ns = create_sweeps(s, epochsPerSweep = 8)","category":"page"},{"location":"assr/examples/#Extract-Steady-State-Response-Statistics","page":"Example","title":"Extract Steady State Response Statistics","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"Standard statistical tests can then be run on the data. An ftest will automatically convert the sweeps in to the frequency domain and apply the appropriate tests with sane default values. By default, it analyses the modulation frequency. The result is stored in the statistics processing log by default, but this can be specified by the user.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"s = ftest(s)\ns.processing[\"statistics\"]","category":"page"},{"location":"assr/examples/#Quantify-the-false-positive-rate-of-statistical-analysis","page":"Example","title":"Quantify the false positive rate of statistical analysis","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"While its interesting to observe a significant response at the modulation rate as expected, it is important to ensure that the false detection rate at other frequencies is not too high. As such we can analyse all other frequencies from 10 to 400 Hz and quantify the false detection rate.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"For this example file the resulting false detection rate is slightly over 5%.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"using DataFrames, Query, Statistics\n\ns = ftest(s, freq_of_interest=[10:38; 42:400])\n\ns.processing[\"statistics\"][\"Significant\"] = Int.(s.processing[\"statistics\"][\"Statistic\"] .< 0.05)\n\ns.processing[\"statistics\"] |> \n    @groupby(_.AnalysisType) |> \n    @map({AnalysisType=key(_),\n        FalseDiscoveryRate_Percentage=100*Statistics.mean(_.Significant)}) |>\n    DataFrame","category":"page"},{"location":"assr/examples/#Visualise-response-amplitude","page":"Example","title":"Visualise response amplitude","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"Finally we can plot the ASSR spectrum. We will also mark with red dots the frequency components which contained a significant stimulus locked response according to the f-test. And we add a vertical line at the modulation rate.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"using StatsPlots\n\ndf = s.processing[\"statistics\"] |> \n    @groupby(_.AnalysisFrequency) |> \n    @map({AnalysisFrequency=key(_),\n        AverageAmplitude=Statistics.mean(_.SignalAmplitude),\n        AverageStatistic=Int(Statistics.mean(_.Statistic).<0.05)}) |>\n    @orderby_descending(_.AnalysisFrequency) |> \n    DataFrame\n\nvline([40], ylims=(0, 0.3), colour=\"grey\", line=:dash, lab=\"Modulation rate\")\ndf |> @df StatsPlots.plot!(:AnalysisFrequency, :AverageAmplitude, xlabel=\"Frequency (Hz)\", ylabel=\"Amplitude (uV)\", lab=\"\", color=\"black\")\ndf|> @filter(_.AverageStatistic == 1) |> @df StatsPlots.scatter!(:AnalysisFrequency, :AverageAmplitude, color=\"red\", ms=4, lab=\"Significant response\")\ncurrent() |> DisplayAs.PNG # hide","category":"page"},{"location":"assr/examples/#Conclusion","page":"Example","title":"Conclusion","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"An analysis pipeline of a steady state response measurement has been demonstrated. Importing the file and specifying the required information was described. As was preprocessing and statistical analysis. The false detection rate of the analysis was quantified. Finally, a figure was created to summarise the underlying data and demonstrate the increased stimulus locked response at the modulation rate.","category":"page"},{"location":"#Neuroimaging.jl-Manual","page":"Home","title":"Neuroimaging.jl Manual","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Process neuroimaging data in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For research only. Not for clinical use. Use at your own risk.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Neuroimaging","category":"page"},{"location":"assr/assr/#Introduction","page":"Overview","title":"Introduction","text":"","category":"section"},{"location":"assr/assr/","page":"Overview","title":"Overview","text":"Add basic information about steady state responses.","category":"page"},{"location":"types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"A feature of the Julia programming language is the strong type system. This package exploits that strength and defines various types for storing information about your neuroimaging data.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"A number of types are provided to handle different types of data. Functions are provided to perform common operations on each type. For example, the function channelnames would return the correct information when called on a steady state response or evoked potential data type (yet to be implemented). Users should interact with types using function, and not address the underlying fields directly. This allows the underlying data type to be improved without breaking existing code. For example, do not address sensor.label, you should use label(sensor.)","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"Types also exist for storing metadata. For example, electrodes are a sub type of the Sensor type. And the position of the sensors may be in the Talairach space, which is a subtype of the Coordinate type.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"A brief description of each type is provided below. See the following documentation sections for more details of each type, including examples and function APIs.","category":"page"},{"location":"types/#Available-types","page":"Types","title":"Available types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"CurrentModule = Neuroimaging","category":"page"},{"location":"types/#Measurement","page":"Types","title":"Measurement","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"This package provides for different neuroimaging techniques such as EEG and fNIRS, and these are represented as top level abstract types.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"Within these types support is provided for different types of neuroimaging paradigms which are sub types of the top level techniques. For example, if you have acquired data of a steady state response using the EEG methodology you would use the SSR type. A general type is also provided for each imaging technique. For example, if your EEG study design does not fit one of the neuroimaging paradigms implemented in this package you can use the GeneralEEG type.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"TODO: Add resting state type.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"EEG\nGeneralEEG\nSSR","category":"page"},{"location":"types/#Neuroimaging.EEG","page":"Types","title":"Neuroimaging.EEG","text":"Abstract type for storing Electroencephalography (EEG) data.\n\nOther types inherit from this EEG type. All EEG types support the following functions:\n\nsamplingrate()\nchannelnames()\nremove_channel!()\nkeep_channel!()\ntrim_channel()\nhighpass_filter()\nlowpass_filter()\nrereference()\n\ndata = # load your EEG data using for example read_SSR()\n\nsamplingrate(data)  # Returns the sampling rate\nchannelnames(data)  # Returns the channel names\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.GeneralEEG","page":"Types","title":"Neuroimaging.GeneralEEG","text":"Type for storing general EEG data without assumption of any experimental paradigm.\n\nExample\n\ns = GeneralEEG(\"filename.bdf\")\ns = rereference(s, \"Cz\")\ns = remove_channel!(s, \"Cz\")\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.SSR","page":"Types","title":"Neuroimaging.SSR","text":"Type for storing steady state response (SSR) data.\n\nIn addition to the functions available for all EEG types, the SSR type supports:\n\nmodulationrate(): the modulation rate of the stimulus\n\nThe following standard names are used when saving data to the processing dictionary.\n\nName: The identifier for the participant\nSide: Side of stimulation\nCarrier_Frequency: Carrier frequency of the stimulus\nAmplitude: Amplitude of the stimulus\nepochs: The epochs extracted from the recording\nsweeps: The extracted sweeps from the recording\n\nExample\n\nPut an example here\n\ns = SSR(\"filename\")\n\n\n\n\n\n","category":"type"},{"location":"types/#Sensor","page":"Types","title":"Sensor","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Sensor\nElectrode\nOptode\nSource\nDetector","category":"page"},{"location":"types/#Neuroimaging.Sensor","page":"Types","title":"Neuroimaging.Sensor","text":"Abstract type for storing neuroimaging sensors.\n\nOther types inherit from the Sensor type. And common functions can be run on all sensors sub types. All sensors have a label and coordinate. Some sensors also store additional information. For example, fNIRS sensors may hold wavelength information.\n\nAll Sensor types support the following functions:\n\nlabel()\nlabels()\nx()\ny()\nz()\n\nmy_sensor = # Create a electrode, optode etc\nlabel(my_sensor)  # Returns the sensor name\nx(my_sensor)      # Returns the x coordinate of the sensor\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.Electrode","page":"Types","title":"Neuroimaging.Electrode","text":"Electrode sensor type used in EEG measurements.\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.Optode","page":"Types","title":"Neuroimaging.Optode","text":"Optode abstract sensor type used in fNIRS measrurements.\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.Source","page":"Types","title":"Neuroimaging.Source","text":"Source optode sensor type used in fNIRS measurements.\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.Detector","page":"Types","title":"Neuroimaging.Detector","text":"Detector optode sensor type used in fNIRS measurements.\n\n\n\n\n\n","category":"type"},{"location":"types/#Coordinate","page":"Types","title":"Coordinate","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Coordinate\nBrainVision \nTalairach\nSPM\nUnknownCoordinate","category":"page"},{"location":"types/#Neuroimaging.Coordinate","page":"Types","title":"Neuroimaging.Coordinate","text":"Abstract type for coordinates in three dimensions\n\nAll sub types have x, y, z coordinates. And conversion is available between subtypes using the convert function.\n\nbv_coord = (0.3, 2, 3.1)\ntal_coord = convert(Talairach, mni)\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.BrainVision","page":"Types","title":"Neuroimaging.BrainVision","text":"Type for BrainVision coordinate system.\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.Talairach","page":"Types","title":"Neuroimaging.Talairach","text":"Type for Talairach coordinate system.\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.SPM","page":"Types","title":"Neuroimaging.SPM","text":"Type for SPM coordinate system.\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.UnknownCoordinate","page":"Types","title":"Neuroimaging.UnknownCoordinate","text":"Type to be used when the coordinate system is unknown.\n\n\n\n\n\n","category":"type"},{"location":"types/#Other","page":"Types","title":"Other","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"VolumeImage\nDipole","category":"page"},{"location":"types/#Neuroimaging.VolumeImage","page":"Types","title":"Neuroimaging.VolumeImage","text":"Volume Image\n\nThis composite type contains volume image information\n\nFields\n\ndata: contains the recorded data\nx, y, z, t Arrays containing spatial and time information\nmethod AbstractString of method used to compute tomography\ninfo: additional information in dictionary\n\nprocessing Fields\n\nThe following standard names are used when saving data to the info dictionary.\n\nRegularisation: Regularisation used in tomography\nNormalisationConstant: Value used to normalise image to maximum of 1\nFileName: Name of file\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.Dipole","page":"Types","title":"Neuroimaging.Dipole","text":"Dipole type.\n\nParameters\n\ncoord_system: The coordinate system that the locations are stored in\nx,y,z: Location of dipole\nx,y,z/ori: Orientation of dipole\ncolor: Color of dipole for plotting\nstate: State of dipol\nsize: size of dipole\n\n\n\n\n\n","category":"type"}]
}
